1.1 BUILDING ABSTRACTIONS WITH PROCEDURES

Process manipulates data. A program is a set of rules that govern a process (hence, procedural). Programs conjure processes using a language.

complex > combine simple ideas into one complex compound
relation > set ideas together to make relations (identity, difference)
abstraction > separate one idea from its similar

GENERAL DEFINITIONS
Language: instructions on tasks, framework for ideas and processes. A language is composed of primitive expressions, means of combination, means of abstraction.
Syntax: primitive expressions and evaluation methods.
Programming: stacking simple procedures for growing complexity.
Environment: memory that keeps track of name-object pairs.
Naming: basic tool of abstraction.
Syntatic sugar: special syntax forms that are simply convenient alternative surface forms for things that can be written uniformly.

LISP
Lisp was invented as a formalism for reasoning recursive equations as a model for computation. See John McCarthy, "Recursive Functions of Symbolic Expressions and their Computation by Machine". In Lisp, processes themselves can be called as data.
- Prefix notation: (operator operand operand ...)
- Nesting as operation combination.
- Naming as definitions using function (define name value)
- Applicative evaluation model

Evaluation methods: normal order evaluates each argument first, then operates on them. applicative order evaluates operand first, applying the procedure to arguments, then evaluates the body by substituting arguments to values.

In mathematics, we are usually concerned with the declarative (what is), whereas in computer science we are concerned with the imperative (how to).

Block structure: structuring internal definitions local to a procedure, nesting definitions.
Lexical scoping: defining free variables in a procedure that are used in inner definitions. Embedded definitions come first in a procedure body (before result).

## Reflection: functions now seem to me like a powerful logical tool to overcome the tauthological limits of mathematics (1 + 1 = 2 => 2 = 2). See School of Vienna.

1.2 PROCEDURES AND THE PROCESSES THEY GENREATE
Procedure: pattern of local evolution of computer processes.

In programming, we plan the course of action to be taken by a process and control the process using a program. Only after developing the skill of visualising processes generated by procedures can we construct programs that exhibit the desired behaviour.

LINEAR RECURSION AND ITERATION
Linear recursion builds up a chain of deferred operations, and contracts as the operations are performed. The length of the chain operations grows linearly with n. 

Iterative process is one whose state can be summarized by a fixed number of state variables, with a fixed rule to update state and the condition in which the process ends. The number of steps grow linearly with n.

Tail-recursive implementation allows iteration to be expressed using ordinary procedure call -- special iteration is syntactic sugar.





